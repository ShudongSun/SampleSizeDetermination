if(i==1){
train_data = cbind(data.frame(mvrnorm(n_train, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
test_data = cbind(data.frame(mvrnorm(n_test, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
}else{
train_data = rbind(train_data,cbind(mvrnorm(n_train, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
test_data = rbind(test_data,cbind(mvrnorm(n_test, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
}
}
pred = get_predictions(train_data=train_data, test_data=test_data, model=model, func=func)
# Record error rate for one fold (0 or 1 for LOOCV)
cm = table(test_data[,ncol(test_data)], pred)
errors_temp[k] = misclass_err(test_data[,ncol(test_data)], pred)
ARIs_temp[k] = adjustedRandIndex(test_data[,ncol(test_data)], pred)
AMIs_temp[k] = AMI(test_data[,ncol(test_data)], pred)
}
require(foreach)
x <- foreach(
k = 1:num_repeat,
.combine = 'c'
) %dopar% {
if(print_progress_bar==TRUE){pb$tick()}
for(i in 1:num_class){
if(i==1){
train_data = cbind(data.frame(mvrnorm(n_train, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
test_data = cbind(data.frame(mvrnorm(n_test, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
}else{
train_data = rbind(train_data,cbind(mvrnorm(n_train, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
test_data = rbind(test_data,cbind(mvrnorm(n_test, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
}
}
pred = get_predictions(train_data=train_data, test_data=test_data, model=model, func=func)
# Record error rate for one fold (0 or 1 for LOOCV)
cm = table(test_data[,ncol(test_data)], pred)
errors_temp[k] = misclass_err(test_data[,ncol(test_data)], pred)
ARIs_temp[k] = adjustedRandIndex(test_data[,ncol(test_data)], pred)
AMIs_temp[k] = AMI(test_data[,ncol(test_data)], pred)
}
?mvrnorm
x <- foreach(
k = 1:num_repeat,
.combine = 'c',
.packages = 'MASS'
) %dopar% {
if(print_progress_bar==TRUE){pb$tick()}
for(i in 1:num_class){
if(i==1){
train_data = cbind(data.frame(mvrnorm(n_train, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
test_data = cbind(data.frame(mvrnorm(n_test, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
}else{
train_data = rbind(train_data,cbind(mvrnorm(n_train, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
test_data = rbind(test_data,cbind(mvrnorm(n_test, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
}
}
pred = get_predictions(train_data=train_data, test_data=test_data, model=model, func=func)
# Record error rate for one fold (0 or 1 for LOOCV)
cm = table(test_data[,ncol(test_data)], pred)
errors_temp[k] = misclass_err(test_data[,ncol(test_data)], pred)
ARIs_temp[k] = adjustedRandIndex(test_data[,ncol(test_data)], pred)
AMIs_temp[k] = AMI(test_data[,ncol(test_data)], pred)
}
x <- foreach(
k = 1:num_repeat,
.combine = 'c',
.packages = c('MASS','randomForest')
) %dopar% {
if(print_progress_bar==TRUE){pb$tick()}
for(i in 1:num_class){
if(i==1){
train_data = cbind(data.frame(mvrnorm(n_train, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
test_data = cbind(data.frame(mvrnorm(n_test, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
}else{
train_data = rbind(train_data,cbind(mvrnorm(n_train, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
test_data = rbind(test_data,cbind(mvrnorm(n_test, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
}
}
pred = get_predictions(train_data=train_data, test_data=test_data, model=model, func=func)
# Record error rate for one fold (0 or 1 for LOOCV)
cm = table(test_data[,ncol(test_data)], pred)
errors_temp[k] = misclass_err(test_data[,ncol(test_data)], pred)
ARIs_temp[k] = adjustedRandIndex(test_data[,ncol(test_data)], pred)
AMIs_temp[k] = AMI(test_data[,ncol(test_data)], pred)
}
x <- foreach(
k = 1:num_repeat,
.combine = 'c',
.packages = c('MASS','randomForest','mclust','aricode')
) %dopar% {
if(print_progress_bar==TRUE){pb$tick()}
for(i in 1:num_class){
if(i==1){
train_data = cbind(data.frame(mvrnorm(n_train, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
test_data = cbind(data.frame(mvrnorm(n_test, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
}else{
train_data = rbind(train_data,cbind(mvrnorm(n_train, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
test_data = rbind(test_data,cbind(mvrnorm(n_test, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
}
}
pred = get_predictions(train_data=train_data, test_data=test_data, model=model, func=func)
# Record error rate for one fold (0 or 1 for LOOCV)
cm = table(test_data[,ncol(test_data)], pred)
errors_temp[k] = misclass_err(test_data[,ncol(test_data)], pred)
ARIs_temp[k] = adjustedRandIndex(test_data[,ncol(test_data)], pred)
AMIs_temp[k] = AMI(test_data[,ncol(test_data)], pred)
}
x
errors_temp
errors_temp <- vector(length=num_repeat)
ARIs_temp <- vector(length=num_repeat)
AMIs_temp <- vector(length=num_repeat)
errors_temp
foreach(
k = 1:num_repeat,
.combine = 'c',
.packages = c('MASS','randomForest','mclust','aricode')
) %dopar% {
if(print_progress_bar==TRUE){pb$tick()}
for(i in 1:num_class){
if(i==1){
train_data = cbind(data.frame(mvrnorm(n_train, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
test_data = cbind(data.frame(mvrnorm(n_test, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
}else{
train_data = rbind(train_data,cbind(mvrnorm(n_train, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
test_data = rbind(test_data,cbind(mvrnorm(n_test, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
}
}
pred = get_predictions(train_data=train_data, test_data=test_data, model=model, func=func)
# Record error rate for one fold (0 or 1 for LOOCV)
cm = table(test_data[,ncol(test_data)], pred)
errors_temp[k] = misclass_err(test_data[,ncol(test_data)], pred)
ARIs_temp[k] = adjustedRandIndex(test_data[,ncol(test_data)], pred)
AMIs_temp[k] = AMI(test_data[,ncol(test_data)], pred)
}
errors_temp
ARIs_temp
AMIs_temp
foreach(
k = 1:num_repeat,
.combine = 'c',
.packages = c('MASS','randomForest','mclust','aricode')
) %dopar% {
if(print_progress_bar==TRUE){pb$tick()}
for(i in 1:num_class){
if(i==1){
train_data = cbind(data.frame(mvrnorm(n_train, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
test_data = cbind(data.frame(mvrnorm(n_test, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
}else{
train_data = rbind(train_data,cbind(mvrnorm(n_train, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
test_data = rbind(test_data,cbind(mvrnorm(n_test, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
}
}
pred = get_predictions(train_data=train_data, test_data=test_data, model=model, func=func)
# Record error rate for one fold (0 or 1 for LOOCV)
cm = table(test_data[,ncol(test_data)], pred)
errors_temp[k] = misclass_err(test_data[,ncol(test_data)], pred)
ARIs_temp[k] = adjustedRandIndex(test_data[,ncol(test_data)], pred)
AMIs_temp[k] = AMI(test_data[,ncol(test_data)], pred)
}
errors_temp = misclass_err(test_data[,ncol(test_data)], pred)
errors_temp
cbind(errors_temp,ARIs_temp,AMIs_temp)
ARIs_temp = adjustedRandIndex(test_data[,ncol(test_data)], pred)
AMIs_temp = AMI(test_data[,ncol(test_data)], pred)
AMIs_temp
cbind(errors_temp,ARIs_temp,AMIs_temp)
return(cbind(errors_temp,ARIs_temp,AMIs_temp))
result_temp <- foreach(
k = 1:num_repeat,
.combine = 'rbind',
.packages = c('MASS','randomForest','mclust','aricode')
) %dopar% {
if(print_progress_bar==TRUE){pb$tick()}
for(i in 1:num_class){
if(i==1){
train_data = cbind(data.frame(mvrnorm(n_train, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
test_data = cbind(data.frame(mvrnorm(n_test, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
}else{
train_data = rbind(train_data,cbind(mvrnorm(n_train, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
test_data = rbind(test_data,cbind(mvrnorm(n_test, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
}
}
pred = get_predictions(train_data=train_data, test_data=test_data, model=model, func=func)
# Record error rate for one fold (0 or 1 for LOOCV)
cm = table(test_data[,ncol(test_data)], pred)
errors_temp = misclass_err(test_data[,ncol(test_data)], pred)
ARIs_temp = adjustedRandIndex(test_data[,ncol(test_data)], pred)
AMIs_temp = AMI(test_data[,ncol(test_data)], pred)
return(cbind(errors_temp,ARIs_temp,AMIs_temp))
}
result_temp
is.data.frame(result_temp)
result_temp["errors_temp"]
is.matrix(result_temp)
result_temp[,"errors_temp"]
?parallel
?foreach
roxygen2::roxygenize(package.dir = ".")
rm(list = c("get_predictions", "misclass_err"))
roxygen2::roxygenize(package.dir = ".")
library(SSD)
?ssd
data_pmbc <- read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"),row.names=1)
data = data_pmbc
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
p = sample(10:15,1)
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
x_true = data[,-length(data)]
y_true = data[,length(data)]
elbow_true = ssd(x_true, y_true, mode="true")
elbow_pilot = ssd(x_pilot, y_pilot)
library(SSD)
elbow_true = ssd(x_true, y_true, mode="true")
elbow_pilot = ssd(x_pilot, y_pilot)
library(SSD)
elbow_true = ssd(x_true, y_true, mode="true")
elbow_pilot = ssd(x_pilot, y_pilot)
elbow_true = ssd(x_true, y_true, mode="true", num_repeat = 10)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 10)
result_temp <- foreach(
k = 1:num_repeat,
.combine = 'rbind',
.packages = c('MASS','randomForest','mclust','aricode','progress')
) %dopar% {
if(print_progress_bar==TRUE){pb$tick()}
for(i in 1:num_class){
if(i==1){
train_data = cbind(data.frame(mvrnorm(n_train, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
test_data = cbind(data.frame(mvrnorm(n_test, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
}else{
train_data = rbind(train_data,cbind(mvrnorm(n_train, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
test_data = rbind(test_data,cbind(mvrnorm(n_test, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
}
}
pred = get_predictions(train_data=train_data, test_data=test_data, model=model, func=func)
# Record error rate for one fold (0 or 1 for LOOCV)
cm = table(test_data[,ncol(test_data)], pred)
errors_temp = misclass_err(test_data[,ncol(test_data)], pred)
ARIs_temp = adjustedRandIndex(test_data[,ncol(test_data)], pred)
AMIs_temp = AMI(test_data[,ncol(test_data)], pred)
return(cbind(errors_temp,ARIs_temp,AMIs_temp))
}
result_temp <- foreach(
k = 1:num_repeat,
.combine = 'rbind',
.packages = c('MASS','randomForest','mclust','aricode','progress')
) %dopar% {
if(print_progress_bar==TRUE){pb$tick()}
for(i in 1:num_class){
if(i==1){
train_data = cbind(data.frame(mvrnorm(n_train, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
test_data = cbind(data.frame(mvrnorm(n_test, means[i,], sigma_hat)),class = factor(i,levels=1:num_class))
}else{
train_data = rbind(train_data,cbind(mvrnorm(n_train, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
test_data = rbind(test_data,cbind(mvrnorm(n_test, means[i,], sigma_hat),class = factor(i,levels=1:num_class)))
}
}
pred = get_predictions(train_data=train_data, test_data=test_data, model=model, func=func)
# Record error rate for one fold (0 or 1 for LOOCV)
cm = table(test_data[,ncol(test_data)], pred)
errors_temp = misclass_err(test_data[,ncol(test_data)], pred)
ARIs_temp = adjustedRandIndex(test_data[,ncol(test_data)], pred)
AMIs_temp = AMI(test_data[,ncol(test_data)], pred)
return(cbind(errors_temp,ARIs_temp,AMIs_temp))
}
pb$tick()
pb <- progress_bar$new(format = "(:spin) [:bar] :percent [Elapsed time: :elapsedfull]",
total = n_iter,
complete = "=",   # Completion bar character
incomplete = "-", # Incomplete bar character
current = ">",    # Current bar character
clear = FALSE,    # If TRUE, clears the bar when finish
width = 100)      # Width of the progress bar
require(progress)
pb <- progress_bar$new(format = "(:spin) [:bar] :percent [Elapsed time: :elapsedfull]",
total = n_iter,
complete = "=",   # Completion bar character
incomplete = "-", # Incomplete bar character
current = ">",    # Current bar character
clear = FALSE,    # If TRUE, clears the bar when finish
width = 100)      # Width of the progress bar
pb$tick()
library(SSD)
roxygen2::roxygenize(package.dir = ".")
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 10)
install.packages("doSNOW")
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 10)
library(SSD)
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 2)
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 2)
elbow_true = ssd(x_true, y_true, mode="true", num_repeat = 2)
library(SSD)
library(SSD)
elbow_true = ssd(x_true, y_true, mode="true", num_repeat = 2)
library(SSD)
elbow_true = ssd(x_true, y_true, mode="true", num_repeat = 2)
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 2)
library(SSD)
elbow_true = ssd(x_true, y_true, mode="true", num_repeat = 2)
n_train_list
length(n_train_list)+1
n_iter <- length(n_train_list)+1
n_iter
library(SSD)
elbow_true = ssd(x_true, y_true, mode="true", num_repeat = 2)
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 2)
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 2)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 2)
num_repeat
elbow_true = ssd(x_true, y_true, mode="true", num_repeat = 2)
icount(100)
?progress_bar$new
library(SSD)
elbow_true = ssd(x_true, y_true, mode="true", num_repeat = 2)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 2)
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 2)
?txtProgressBar
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 2)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 5)
warnings()
f <- function(...){
pb$tick()
rbind(...)
}
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 2)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 2)
library(SSD)
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot,n_train_list = c(30), num_repeat = 5)
elbow_pilot = ssd(x_pilot, y_pilot,n_train_list = c(15,30), num_repeat = 5)
library(SSD)
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 5)
library(SSD)
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 5)
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 5)
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 5)
library(SSD)
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 5)
length("Training size =",n_train,"is running...")
length(paste("Training size =",n_train,"is running..."))
paste("Training size =",n_train,"is running...")
"Initializing..."
"Initializing...                  "
"Initializing...                 "
paste("[Training size =",n_train,"is running...]"
)
paste("[Training size =",100,"is running...]")
"[Finished]                               "
"[Finished]                        "
"[Finished]                         "
"[Finished]                         "
library(SSD)
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 5)
elbow_true = ssd(x_true, y_true, mode="true", num_repeat = 5)
n.cores=NULL
is.na(n.cores)
is.null(n.cores)
roxygen2::roxygenize(package.dir = ".")
getwd()
roxygen2::roxygenize(package.dir = ".")
library(SSD)
library(SSD)
?doParallel
?progress_bar
library(SSD)
?ssd
data_pmbc <- read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"),row.names=1)
data = data_pmbc
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
p = sample(10:15,1)
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
elbow_pilot = ssd(x_pilot, y_pilot)
x_true = data[,-length(data)]
y_true = data[,length(data)]
elbow_true = ssd(x_true, y_true, mode="true")
library(SSD)
roxygen2::roxygenize(package.dir = ".")
library(SSD)
roxygen2::roxygenize(package.dir = ".")
library(SSD)
?ssd
data_pmbc <- read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"),row.names=1)
data = data_pmbc
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
p = sample(10:15,1)
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
elbow_pilot = ssd(x_pilot, y_pilot)
x_true = data[,-length(data)]
y_true = data[,length(data)]
elbow_true = ssd(x_true, y_true, mode="true")
library(SSD)
elbow_pilot = ssd(x_pilot, y_pilot, num_repeat = 10)
elbow_true = ssd(x_true, y_true, mode="true", num_repeat = 10)
library(SSD)
elbow_true = ssd(x_true, y_true, mode="true",n.cores=2)
elbow_true = ssd(x_true, y_true, mode="true",num_repeat = 10)
library(SSD)
?ssd
?ssd
roxygen2::roxygenize(package.dir = ".")
getwd()
setwd("D:/Dropbox/USC/RA/2020summer/multi-cell sample size/code/SSD/SampleSizeDetermination")
roxygen2::roxygenize(package.dir = ".")
?ssd
roxygen2::roxygenize(package.dir = ".")
library(SSD)
remove.packages("SSD")
remove.packages("randomForest")
devtools::install_github("ShudongSun/SampleSizeDetermination")
?ssd
require(SSD)
?ssd
data_pmbc <- read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"),row.names=1)
data = data_pmbc
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
p = sample(10:15,1)
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
elbow_pilot = ssd(x_pilot, y_pilot)
x_true = data[,-length(data)]
y_true = data[,length(data)]
elbow_true = ssd(x_true, y_true, mode="true")
R CMD build SSD
devtools::build()
getwd()
devtools::install()
browseVignettes()
devtools::build(vignettes = TRUE, manual = TRUE)
browseVignettes(SSD)
usethis::use_vignette("SSD")
remove.packages("yaml")
install.packages("yaml")
install.packages("yaml")
install.packages("yaml")
install.packages("yaml")
remove.packages("rmarkdown")
install.packages("rmarkdown")
sessionInfo()
remove.packages("rmarkdown")
usethis::use_vignette("SSD")
getwd()
