train_data = rbind(train_data, train_i_data)
test_data = rbind(test_data, test_i_data)
}
}
train_data_x = train_data[,-length(test_data)]
train_data_y = train_data$phenoid
test_data_x = test_data[,-length(test_data)]
result = predict_model(train_data_x, train_data_y, test_data_x)
result
head(result)
table(result)
require(SSD)
?ssd
library(SSD)
data_pmbc <- read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"),row.names=1)
data = data_pmbc
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
table(pilot_data$phenoid)
result_pilot = ssd(x_pilot, y_pilot)
result_pilot
library(SSD)
result_pilot
n_train_list
n_train_list = seq(from = 30, to = 600, by = 30)
nn=seq(1,max(n)+50,1)
n = n_train_list
nn=seq(1,max(n)+50,1)
group2=c("synthetic-data")
newx = data.frame(n=nn)
fit_index_syn = nls(index_used ~ a*n^(-b), start = list(a=0.5, b=0.1))
index_used = result_pilot[1,]
View(result_pilot)
fit_index_syn = nls(index_used ~ a*n^(-b), start = list(a=0.5, b=0.1))
install.packages("minpack.lm")
fit_index_syn = nlsLM(index_used ~ a*n^(-b)+c, start = list(a=0.5, b=0.1, c=0.1))
require(minpack.lm)
fit_index_syn = nlsLM(index_used ~ a*n^(-b)+c, start = list(a=0.5, b=0.1, c=0.1))
pred_index_syn = predict(fit_index_syn,newx)
library(SSD)
result_pilot = ssd(x_pilot, y_pilot, num_repeat = 1)
# fit_index = nls(index_used ~ a*n^(-b), start = list(a=0.5, b=0.1))
fit_index = nlsLM(index_used ~ a*n^(-b)+c, start = list(a=0.5, b=0.1, c=0.1))
pred_index = predict(fit_index,newx)
pred_index
size <- Class <- NULL
index_df <-data.frame(
index = c(index_used),
size = rep(n,1),
Class = rep(group2,each=length(index_used))
)
index_pred_df <-data.frame(
index = c(pred_index),
nn = rep(nn,1),
Class = rep(group2,each=length(nn))
)
index_min = min(c(index_used))
index_max = max(c(index_used))
plot(ggplot(data = index_df, aes(x = size, y = index, group=Class,color=Class))+
geom_point()+
geom_line(data = index_pred_df, aes(x=nn, y=index, group=Class,color=Class), na.rm=TRUE)+
labs(x = "Size of training data",y=index,title = paste("Predicted Curve:",model))+
theme_bw()+theme(plot.title = element_text(hjust = 0.5),legend.position="bottom")+
ylim(max(index_min-0.02,0),index_max+0.05))
require(ggplot2)
plot(ggplot(data = index_df, aes(x = size, y = index, group=Class,color=Class))+
geom_point()+
geom_line(data = index_pred_df, aes(x=nn, y=index, group=Class,color=Class), na.rm=TRUE)+
labs(x = "Size of training data",y=index,title = paste("Predicted Curve:",model))+
theme_bw()+theme(plot.title = element_text(hjust = 0.5),legend.position="bottom")+
ylim(max(index_min-0.02,0),index_max+0.05))
index = "classification error"
plot(ggplot(data = index_df, aes(x = size, y = index, group=Class,color=Class))+
geom_point()+
geom_line(data = index_pred_df, aes(x=nn, y=index, group=Class,color=Class), na.rm=TRUE)+
labs(x = "Size of training data",y=index,title = paste("Predicted Curve:",model))+
theme_bw()+theme(plot.title = element_text(hjust = 0.5),legend.position="bottom")+
ylim(max(index_min-0.02,0),index_max+0.05))
model = "randomforest"
plot(ggplot(data = index_df, aes(x = size, y = index, group=Class,color=Class))+
geom_point()+
geom_line(data = index_pred_df, aes(x=nn, y=index, group=Class,color=Class), na.rm=TRUE)+
labs(x = "Size of training data",y=index,title = paste("Predicted Curve:",model))+
theme_bw()+theme(plot.title = element_text(hjust = 0.5),legend.position="bottom")+
ylim(max(index_min-0.02,0),index_max+0.05))
library(SSD)
library(SSD)
data_pmbc <- read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"),row.names=1)
data = data_pmbc
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
table(pilot_data$phenoid)
plot(ggplot(data = index_df, aes(x = size, y = index, group=Class,color=Class))+
geom_point()+
geom_line(data = index_pred_df, aes(x=nn, y=index, group=Class,color=Class), na.rm=TRUE)+
labs(x = "Size of training data",y=index,title = paste("Predicted Curve:",model))+
theme_bw()+theme(plot.title = element_text(hjust = 0.5),legend.position="bottom")+
ylim(max(index_min-0.02,0),index_max+0.05))
result_pilot = ssd(x_pilot, y_pilot, num_repeat = 1)
n_train_list = seq(from = 30, to = 600, by = 30)
mode = "pilot"
index = "ARI"
n = n_train_list
nn=seq(1,max(n)+50,1)
if(mode=="pilot"){group2=c("synthetic-data")}
if(mode=="true"){group2=c("true-data")}
newx = data.frame(n=nn)
# fit_index = nls(index_used ~ a*n^(-b), start = list(a=0.5, b=0.1))
fit_index = nlsLM(index_used ~ a*n^(-b)+c, start = list(a=0.5, b=0.1, c=0.1))
pred_index = predict(fit_index,newx)
size <- Class <- NULL
index_df <-data.frame(
index = c(index_used),
size = rep(n,1),
Class = rep(group2,each=length(index_used))
)
index_pred_df <-data.frame(
index = c(pred_index),
nn = rep(nn,1),
Class = rep(group2,each=length(nn))
)
index_min = min(c(index_used))
index_max = max(c(index_used))
index_used = result_pilot[2,]
n = n_train_list
nn=seq(1,max(n)+50,1)
if(mode=="pilot"){group2=c("synthetic-data")}
if(mode=="true"){group2=c("true-data")}
newx = data.frame(n=nn)
# fit_index = nls(index_used ~ a*n^(-b), start = list(a=0.5, b=0.1))
fit_index = nlsLM(index_used ~ a*n^(-b)+c, start = list(a=0.5, b=0.1, c=0.1))
pred_index = predict(fit_index,newx)
size <- Class <- NULL
index_df <-data.frame(
index = c(index_used),
size = rep(n,1),
Class = rep(group2,each=length(index_used))
)
index_pred_df <-data.frame(
index = c(pred_index),
nn = rep(nn,1),
Class = rep(group2,each=length(nn))
)
index_min = min(c(index_used))
index_max = max(c(index_used))
plot(ggplot(data = index_df, aes(x = size, y = index, group=Class,color=Class))+
geom_point()+
geom_line(data = index_pred_df, aes(x=nn, y=index, group=Class,color=Class), na.rm=TRUE)+
labs(x = "Size of training data",y=index,title = paste("Predicted Curve:",model))+
theme_bw()+theme(plot.title = element_text(hjust = 0.5),legend.position="bottom")+
ylim(max(index_min-0.02,0),index_max+0.05))
result_plot = plot(ggplot(data = index_df, aes(x = size, y = index, group=Class,color=Class))+
geom_point()+
geom_line(data = index_pred_df, aes(x=nn, y=index, group=Class,color=Class), na.rm=TRUE)+
labs(x = "Size of training data",y=index,title = paste("Predicted Curve:",model))+
theme_bw()+theme(plot.title = element_text(hjust = 0.5),legend.position="bottom")+
ylim(max(index_min-0.02,0),index_max+0.05))
model = "randomforest"
result_plot = plot(ggplot(data = index_df, aes(x = size, y = index, group=Class,color=Class))+
geom_point()+
geom_line(data = index_pred_df, aes(x=nn, y=index, group=Class,color=Class), na.rm=TRUE)+
labs(x = "Size of training data",y=index,title = paste("Predicted Curve:",model))+
theme_bw()+theme(plot.title = element_text(hjust = 0.5),legend.position="bottom")+
ylim(max(index_min-0.02,0),index_max+0.05))
result_plot = plot(ggplot(data = index_df, aes(x = size, y = index, group=Class,color=Class))+
geom_point()+
geom_line(data = index_pred_df, aes(x=nn, y=index, group=Class,color=Class), na.rm=TRUE)+
labs(x = "Size of training data",y=index,title = paste("Predicted Curve:",model))+
theme_bw()+theme(plot.title = element_text(hjust = 0.5),legend.position="bottom")+
ylim(max(index_min-0.02,0),index_max+0.05))
result_plot
result_plot
library(SSD)
library(SSD)
?ssd
?plot_fit_ipl
?get_predictions
?misclass_err
?plot_fit_ipl
library(SSD)
?plot_fit_ipl
require(SSD)
?plot_fit_ipl
?ssd
data_pmbc <- read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"),row.names=1)
data = data_pmbc
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
table(pilot_data$phenoid)
result_pilot = ssd(x_pilot, y_pilot, num_repeat = 1)
library(SSD)
result_pilot = ssd(x_pilot, y_pilot, num_repeat = 1)
library(SSD)
result_pilot = ssd(x_pilot, y_pilot, num_repeat = 1)
library(SSD)
result_pilot = ssd(x_pilot, y_pilot, num_repeat = 1)
roxygen2::roxygenize(package.dir = ".")
getwd()
getwd()
roxygen2::roxygenize(package.dir = ".")
require(SSD)
?plot_fit_ipl
library(SSD)
roxygen2::roxygenize(package.dir = ".")
?ssd
data_pmbc <- read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"),row.names=1)
data = data_pmbc
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
table(pilot_data$phenoid)
result_pilot = ssd(x_pilot, y_pilot, num_repeat = 1)
library(SSD)
roxygen2::roxygenize(package.dir = ".")
result_pilot = ssd(x_pilot, y_pilot, num_repeat = 1)
result_pilot
plot_fit_ipl(result_pilot[1,], n_train_list = seq(from = 30, to = 600, by = 30), model = "randomforest",mode = "pilot",index = "classification error")
data_pmbc <- read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"),row.names=1)
data = data_pmbc
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
table(pilot_data$phenoid)
x_true = data[,-length(data)]
y_true = data[,length(data)]
elbow_pilot_11 = ssd(x_pilot, y_pilot,model = "randomforest",index = "classification error",n_train_list=seq(from=30, to=600,by=30))
elbow_pilot_12 = ssd(x_pilot, y_pilot,model = "randomforest",index = "ARI",n_train_list=seq(from=30, to=600,by=30))
elbow_pilot_13 = ssd(x_pilot, y_pilot,model = "randomforest",index = "AMI",n_train_list=seq(from=30, to=600,by=30))
elbow_true_11 = ssd(x_true , y_true ,model = "randomforest",index = "classification error",n_train_list=seq(from=30, to=600,by=30), mode="true")
elbow_true_12 = ssd(x_true , y_true ,model = "randomforest",index = "ARI",n_train_list=seq(from=30, to=600,by=30), mode="true")
elbow_true_13 = ssd(x_true , y_true ,model = "randomforest",index = "AMI",n_train_list=seq(from=30, to=600,by=30), mode="true")
elbow_pilot_11
elbow_pilot_12
plot_fit_ipl(elbow_pilot_12[2,], n_train_list = seq(from = 30, to = 600, by = 30), model = "randomforest",mode = "pilot",index = "ARI")
n_train_list
model = "randomforest"
index = "ARI"
n_train_list = seq(from = 30, to = 600, by = 30)
mode = "pilot"
index_used = elbow_pilot_12[2,]
n = n_train_list
nn=seq(1,max(n)+50,1)
if(mode=="pilot"){group2=c("synthetic-data")}
if(mode=="true"){group2=c("true-data")}
newx = data.frame(n=nn)
# fit_index = nls(index_used ~ a*n^(-b), start = list(a=0.5, b=0.1))
fit_index = nlsLM(index_used ~ a*n^(-b)+c, start = list(a=0.5, b=0.1, c=0.1))
fit_index
fit_index = nlsLM(index_used ~ a*n^(-b)+c, start = list(a=0.5, b=0.1, c=0.1),
control = nls.lm.control(maxiter = 500))
library(SSD)
require(minpack.lm)
# fit_index = nls(index_used ~ a*n^(-b), start = list(a=0.5, b=0.1))
fit_index = nlsLM(index_used ~ a*n^(-b)+c, start = list(a=0.5, b=0.1, c=0.1),
control = nls.lm.control(maxiter = 500))
# fit_index = nls(index_used ~ a*n^(-b), start = list(a=0.5, b=0.1))
fit_index = nlsLM(index_used ~ a*n^(-b)+c, start = list(a=0.5, b=0.1, c=0.1),
control = nls.lm.control(maxiter = 5000))
# fit_index = nls(index_used ~ a*n^(-b), start = list(a=0.5, b=0.1))
fit_index = nlsLM(index_used ~ a*n^(-b)+c, start = list(a=0.5, b=0.1, c=0.1),
control = nls.lm.control(maxiter = 1000))
# fit_index = nls(index_used ~ a*n^(-b), start = list(a=0.5, b=0.1))
fit_index = nlsLM(index_used ~ a*n^(-b)+c, start = list(a=0.5, b=0.1, c=0.1),
control = nls.lm.control(maxiter = 2000))
# fit_index = nls(index_used ~ a*n^(-b), start = list(a=0.5, b=0.1))
fit_index = nlsLM(index_used ~ a*n^(-b)+c, start = list(a=0.5, b=0.1, c=0.1),
control = nls.lm.control(maxiter = 1000))
library(SSD)
roxygen2::roxygenize(package.dir = ".")
require(SSD)
?ssd
data_pmbc <- read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"),row.names=1)
data = data_pmbc
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
table(pilot_data$phenoid)
x_true = data[,-length(data)]
y_true = data[,length(data)]
elbow_pilot_11 = ssd(x_pilot, y_pilot,model = "randomforest",index = "classification error",n_train_list=seq(from=30, to=600,by=30))
elbow_pilot_12 = ssd(x_pilot, y_pilot,model = "randomforest",index = "ARI",n_train_list=seq(from=30, to=600,by=30))
elbow_pilot_13 = ssd(x_pilot, y_pilot,model = "randomforest",index = "AMI",n_train_list=seq(from=30, to=600,by=30))
elbow_true_11 = ssd(x_true , y_true ,model = "randomforest",index = "classification error",n_train_list=seq(from=30, to=600,by=30), mode="true")
elbow_true_12 = ssd(x_true , y_true ,model = "randomforest",index = "ARI",n_train_list=seq(from=30, to=600,by=30), mode="true")
elbow_true_13 = ssd(x_true , y_true ,model = "randomforest",index = "AMI",n_train_list=seq(from=30, to=600,by=30), mode="true")
library(SSD)
library(SSD)
getwd()
getwd()
roxygen2::roxygenize(package.dir = ".")
library(SSD)
remove.packages(devtools)
library(SSD)
roxygen2::roxygenize(package.dir = ".")
getwd()
setwd("D:/Dropbox/USC/RA/2020summer/multi-cell sample size/code/SSD/SampleSizeDetermination")
getwd()
roxygen2::roxygenize(package.dir = ".")
require(SSD)
?ssd
library(SSD)
data_pmbc <- read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"),row.names=1)
data = data_pmbc
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
table(pilot_data$phenoid)
result_pilot = ssd(x_pilot, y_pilot, num_repeat=1)
?ssd
roxygen2::roxygenize(package.dir = ".")
library(SSD)
result_pilot = ssd(x_pilot, y_pilot, num_repeat=1)
roxygen2::roxygenize(package.dir = ".")
setwd("D:/Dropbox/USC/RA/2020summer/multi-cell sample size/code/SSD/SampleSizeDetermination")
roxygen2::roxygenize(package.dir = ".")
library(SSD)
require(SSD)
roxygen2::roxygenize(package.dir = ".")
library(SSD)
?ssd
pilot_data <- read.csv(system.file("extdata", "data_pbmc68k_pilot_18pc.csv", package = "SSD"),row.names=1)
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
table(pilot_data$phenoid)
result_pilot = ssd(x_pilot, y_pilot)
View(pilot_data)
getwd()
?ssd
pilot_data <- read.csv(system.file("extdata", "data_pbmc68k_pilot_18pc.csv", package = "SSD"),row.names=1)
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
table(pilot_data$phenoid)
result_pilot_11 = ssd(x_pilot, y_pilot,model = "randomforest",index = "ARI",n_train_list=seq(from=30, to=600,by=30), n_test=100)
require(SSD)
result_pilot_11 = ssd(x_pilot, y_pilot,model = "randomforest",index = "ARI",n_train_list=seq(from=30, to=600,by=30), n_test=100)
result_true_11 = ssd(x=x_true_train, y=y_true_train, model = "randomforest", index="ARI", n_train_list=seq(from=30, to=600,by=30),
mode="true", test_x=x_true_test, test_y=y_true_test, n_test=100)
n_train_list=seq(from=30, to=600,by=30)
mode='pilot'
index="ARI"
model = "randomforest
""
"
model = "randomforest"
plot_fit_ipl(result_true_11[1,],n_train_list, mode, index, model)
result_true_11[1,]
plot_fit_ipl(result_pilot_11[1,],n_train_list, mode, index, model)
plot_fit_ipl(result_pilot_11[2,],n_train_list, mode, "ARI", model)
plot_fit_ipl(result_pilot_11[1,],n_train_list, mode, "classification error", model)
plot_fit_ipl(result_pilot_11[3,],n_train_list, mode, "AMI", model)
?ssd
train_data <- read.csv(system.file("extdata", "data_pbmc68k_train_23pc.csv", package = "SSD"),row.names=1)
test_data <- read.csv(system.file("extdata", "data_pbmc68k_test_23pc.csv", package = "SSD"),row.names=1)
x_true_train = train_data[,-length(train_data)]
y_true_train = train_data[,length(train_data)]
table(train_data$phenoid)
x_true_test = test_data[,-length(test_data)]
y_true_test = test_data[,length(test_data)]
table(test_data$phenoid)
result_true_11 = ssd(x=x_true_train, y=y_true_train, model = "randomforest", index="ARI", n_train_list=seq(from=30, to=600,by=30),
mode="true", test_x=x_true_test, test_y=y_true_test, n_test=100)
warnings()
plot_fit_ipl(result_true_11[2,],n_train_list, "true", "ARI", model)
plot_fit_ipl(result_true_11[1,],n_train_list, "true", "classification error", model)
plot_fit_ipl(result_true_11[3,],n_train_list, "true", "AMI", model)
?ssd
roxygen2::roxygenize(package.dir = ".")
getwd()
roxygen2::roxygenize(package.dir = ".")
library(SSD)
?ssd
pilot_data <- read.csv(system.file("extdata", "data_pbmc68k_pilot_18pc.csv", package = "SSD"),row.names=1)
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
table(pilot_data$phenoid)
result_pilot = ssd(x_pilot, y_pilot)
function via the "func" parameter.
func
If you set "model" to "self", you have to pass your self-defined model function. This function should be able to take train_data_x and train_data_y as the first two inputs to train the model and then take test_data_x as the third input and return the predicted scores of test_data_x data. For example,
library(e1071)
predict_model <- function(train_data_x, train_data_y, test_data_x){
train_data = data.frame(train_data_x, as.factor(train_data_y))
names(train_data)[length(train_data)] = "class"
fit_svm<-svm(class~.,data=train_data,probability=TRUE)
pred <- predict(fit_svm, test_data_x)
return(pred)
}
elbow = ssd(x_pilot, y_pilot, model="self", func=predict_model)
?ssd
require(SSD)
pilot_data <- read.csv(system.file("extdata", "data_pbmc68k_pilot_18pc.csv", package = "SSD"),row.names=1)
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
table(pilot_data$phenoid)
train_data <- read.csv(system.file("extdata", "data_pbmc68k_train_23pc.csv", package = "SSD"),row.names=1)
test_data <- read.csv(system.file("extdata", "data_pbmc68k_test_23pc.csv", package = "SSD"),row.names=1)
x_true_train = train_data[,-length(train_data)]
y_true_train = train_data[,length(train_data)]
table(train_data$phenoid)
x_true_test = test_data[,-length(test_data)]
y_true_test = test_data[,length(test_data)]
table(test_data$phenoid)
result_pilot_11 = ssd(x_pilot, y_pilot,model = "randomforest",index = "ARI",n_train_list=seq(from=30, to=600,by=30), n_test=300)
result_true_11 = ssd(x=x_true_train, y=y_true_train, model = "randomforest", index="ARI", n_train_list=seq(from=30, to=600,by=30),
mode="true", test_x=x_true_test, test_y=y_true_test, n_test=300)
result_pilot_12 = ssd(x_pilot, y_pilot,model = "randomforest",index = "classification error",n_train_list=seq(from=30, to=600,by=30), n_test=300)
result_true_12 = ssd(x=x_true_train, y=y_true_train, model = "randomforest", index="classification error", n_train_list=seq(from=30, to=600,by=30),
mode="true", test_x=x_true_test, test_y=y_true_test, n_test=300)
result_pilot_13 = ssd(x_pilot, y_pilot,model = "randomforest",index = "AMI",n_train_list=seq(from=30, to=600,by=30), n_test=300)
result_true_13 = ssd(x=x_true_train, y=y_true_train, model = "randomforest", index="AMI", n_train_list=seq(from=30, to=600,by=30),
mode="true", test_x=x_true_test, test_y=y_true_test, n_test=300)
