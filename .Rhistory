library(SSD)
?SSD
?ssd
devtools::document()
?ssd
devtools::document()
?ssd
devtools::document()
?ssd
?get_predictions
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(SSD)
ls
require(SSD)
?ssd
load("D:/Dropbox/USC/RA/2020summer/multi-cell sample size/code/data_pmbc.Rdata")
data = data_pmbc
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
p = sample(10:15,1)
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
View(x_pilot)
y_pilot
table(y_pilot)
View(data)
c(15,30,60,90,120,150,300,600)
ssd(x_pilot, y_pilot)
ssd(x_pilot, y_pilot, index = "classification error")
load("D:/Dropbox/USC/RA/2020summer/multi-cell sample size/code/data_pmbc.Rdata")
data = data_pmbc
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
p = sample(10:15,1)
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
elbow_pilot = ssd(x_pilot, y_pilot)
### use true data:
x_true = data[,-length(data)]
y_true = data[,length(data)]
elbow_true = ssd(x_true, y_true, mode="true")
### compare the results of pilot and true data:
cbind(elbow_pilot, elbow_true)
cbind(elbow_pilot, elbow_true)
cbind(elbow_pilot, elbow_true)
rbind(elbow_pilot, elbow_true)
roxygen2::roxygenize(package.dir = ".")
?ssd
elbow1 = ssd(x_pilot,y_pilot,n_train_list = c(15, 30, 60, 90, 120, 150, 300, 600))
elbow1
elbow1 = ssd(x_pilot,y_pilot,n_train_list = c(15, 30, 60, 90, 120, 150, 300, 600, 900))
elbow2 = ssd(x_pilot,y_pilot,n_train_list = c(15, 30, 60, 90, 120, 150, 300, 600, 900))
elbow1
elbow2
elbow3 = ssd(x_pilot,y_pilot,n_train_list = c(15, 30, 60, 90, 120, 150, 300, 600, 900, 1200))
elbow3
elbow3
rbind(elbow_pilot, elbow_true)
elbow4 = ssd(x_pilot,y_pilot,n_train_list = seq(from=50,to=600,by=50))
elbow4
elbow1
elbow5 = ssd(x_pilot,y_pilot,n_train_list = seq(from=50,to=650,by=50))
elbow5
elbow6 = ssd(x_pilot,y_pilot,n_train_list = seq(from=50,to=700,by=50))
elbow6
elbow2
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
p = sample(25:30,1)
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
elbow_pilot = ssd(x_pilot, y_pilot)
elbow_pilot
table(y_pilot )
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
p = sample(60,1)
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
elbow_pilot = ssd(x_pilot, y_pilot)
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
p = sample(55:60,1)
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
elbow_pilot = ssd(x_pilot, y_pilot)
elbow_pilot
table(y_pilot )
load("D:/Dropbox/USC/RA/2020summer/multi-cell sample size/code/data_pmbc.Rdata")
data = data_pmbc
### use pilot data:
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
p = sample(80:90,1)
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
elbow_pilot = ssd(x_pilot, y_pilot)
elbow_pilot
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
p = sample(5:6,1)
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
elbow_pilot = ssd(x_pilot, y_pilot)
elbow_pilot
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
p = sample(2:3,1)
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
elbow_pilot = ssd(x_pilot, y_pilot)
elbow_pilot
table(y_pilot )
load("D:/Dropbox/USC/RA/2020summer/multi-cell sample size/code/data_heart.Rdata")
data=data_heart
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
p = sample(10:15,1)
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
elbow_pilot = ssd(x_pilot, y_pilot)
View(data_heart)
elbow_pilot
library(SSD)
load("D:/Dropbox/USC/RA/2020summer/multi-cell sample size/code/data_pmbc.Rdata")
data = data_pmbc
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
p = sample(10:15,1)
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
elbow_pilot = ssd(x_pilot, y_pilot)
elbow_pilot
library(SSD)
ssd= (x_pilot,y_pilot,n_train_list =seq(from=50,to=600,by=50))
eblow1=ssd(x_pilot,y_pilot,n_train_list =seq(from=50,to=600,by=50))
eblow1
x_true = data[,-length(data)]
y_true = data[,length(data)]
elbow_true = ssd(x_true, y_true, mode="true",n_train_list =seq(from=50,to=600,by=50))
elbow_true
eblow21=ssd(x_pilot,y_pilot,n_train_list =seq(from=50,to=600,by=50),index="classification error")
getwd()
setwd("D:/Dropbox/UA/RA/Fishoilactive/Data_from_Project_Data_Sphere/code")
getwd()
install.packages("MatchIt")
knitr::opts_chunk$set(echo = TRUE)
library("MatchIt")
data("lalonde", package = "MatchIt")
force(lalonde)
summary(lalonde)
table(lalonde)
table(lalonde$treat)
table(lalonde$age)
# 1:1 nearest neighbor matching with replacement on
# the Mahalanobis distance
m.out <- matchit(treat ~ age + educ + race + married +
nodegree + re74 + re75,
data = lalonde, distance = "mahalanobis",
replace = TRUE)
m.out
summary(m.out)
plot(summary(m.out))
`plot(summary(m.out))`
head(lalonde)
# No matching; constructing a pre-match matchit object
m.out0 <- matchit(treat ~ age + educ + race + married +
nodegree + re74 + re75, data = lalonde,
method = NULL, distance = "glm")
# Checking balance prior to matching
summary(m.out0)
m.out1
# 1:1 NN PS matching w/o replacement
m.out1 <- matchit(treat ~ age + educ + race + married +
nodegree + re74 + re75, data = lalonde,
method = "nearest", distance = "glm")
m.out1
summary(m.out1, un = FALSE)
summary(m.out1)
head(lalonde)
plot(m.out1, type = "jitter", interactive = FALSE)
plot(m.out1, type = "jitter", interactive = TRUE)
plot(m.out1, type = "jitter", interactive = FALSE)
plot(m.out1, type = "qq", interactive = FALSE,
which.xs = c("age", "married", "re75"))
m.out2 <- matchit(treat ~ age + educ + race + married +
nodegree + re74 + re75, data = lalonde,
method = "full", distance = "glm", link = "probit")
m.out2
install.packages("optmatch")
m.out2 <- matchit(treat ~ age + educ + race + married +
nodegree + re74 + re75, data = lalonde,
method = "full", distance = "glm", link = "probit")
m.out2
summary(m.out2, un = FALSE)
plot(summary(m.out2))
m.data1 <- match.data(m.out1)
View(m.data1)
head(m.data1)
head(lalone)
head(lalonde)
head(m.data1)
table(m.data1$weights)
table(m.data1$treat)
vital_data <- read.csv(file = '..//data//vital_data_2019.csv')
print(dim(vital_data)) # check dimension of data
print(colSums(is.na(vital_data))) # check missing values
features <- c('Subject_ID','vitdactive','fishoilactive','sex','ageyr','raceth',
'bmi','currsmk','htnmed','cholmed','diabetes','diabmed','parhxmi',
'fish1_5wk','Aspirin','statins','N_risk_factors','VitDIntake',
'VitD20','VitD31')
outcomes <- c('malca','malcayrs','brca','brcayrs','prca','prcayrs','colca',
'colcayrs','majorcvd','majryears','imporcvd','impryears','totmi',
'miyears','totst','totchd','chdyears','ischemic','styears',
'hemorrhg','ptca','ptcayears','cabg','cabgyears','confdeath',
'cadeath','cvdeath','chdeath','mideath','stdeath','randyrs')
vital_data_features = vital_data[,features]
y_MI = as.factor(vital_data$totmi)
y_MajorCVD = as.factor(vital_data$majorcvd)
# y_MI_num = vital_data$totmi
# y_MajorCVD_num = vital_data$majorcvd
for(i in 1:length(vital_data_features)){
if(!(i %in% c(1,5,7))){
vital_data_features[,i] = as.factor(vital_data_features[,i])
}
}
summary(vital_data_features)
summary(y_MI)
summary(y_MajorCVD)
library("MatchIt")
data("lalonde", package = "MatchIt")
head(lalonde)
# No matching; constructing a pre-match matchit object
m.out0 <- matchit(treat ~ age + educ + race + married +
nodegree + re74 + re75, data = lalonde,
method = NULL, distance = "glm")
# Checking balance prior to matching
summary(m.out0)
# 1:1 NN PS matching w/o replacement
m.out1 <- matchit(treat ~ age + educ + race + married +
nodegree + re74 + re75, data = lalonde,
method = "nearest", distance = "glm")
m.out1
summary(m.out1, un = FALSE)
plot(m.out1, type = "jitter", interactive = FALSE)
plot(m.out1, type = "qq", interactive = FALSE,
which.xs = c("age", "married", "re75"))
m.out2 <- matchit(treat ~ age + educ + race + married +
nodegree + re74 + re75, data = lalonde,
method = "full", distance = "glm", link = "probit")
m.out2
summary(m.out2, un = FALSE)
plot(summary(m.out2))
m.data1 <- match.data(m.out1)
head(m.data1)
table(m.data1$subclass)
table(m.data1$distance)
vignette("estimating-effects")
View(lalonde)
?matchit
m.out0 <- matchit(treat ~ age + educ + black + hispan + nodegree +
+ married + re74 + re75, method = "nearest", discard = "hull.control",
+ data = lalonde)
m.out0 <- matchit(treat ~ age + educ + black + hispan + nodegree +
married + re74 + re75, method = "nearest", discard = "hull.control",data = lalonde)
View(lalonde)
m.out0 <- matchit(treat ~ age + educ + race + nodegree +
married + re74 + re75, method = "nearest", discard = "hull.control",data = lalonde)
### examples
library("Zelig")
install.packages("Zelig")
install.packages('zeligverse')
devtools::install_github('IQSS/Zelig')
warnings()
devtools::install_github('IQSS/Zelig')
getwd()
setwd("D:/Dropbox/UA/RA/Fishoilactive/Data_from_Project_Data_Sphere/code")
devtools::install_github('IQSS/Zelig')
knitr::opts_chunk$set(echo = TRUE)
library("Zelig")
warning()
knitr::opts_chunk$set(echo = TRUE)
library("Zelig")
devtools::install_github('IQSS/Zelig')
library(rlang)
install.packages(c("BiocManager", "blob", "caret", "checkmate", "cli", "clipr", "commonmark", "conquer", "copula", "dbplyr", "DescTools", "downlit", "DT", "e1071", "fitdistrplus", "FNN", "formatR", "future", "future.apply", "gert", "glmnet", "globals", "glue", "gtools", "haven", "Hmisc", "httr", "igraph", "ipred", "Kendall", "lars", "leiden", "lintr", "lmom", "magrittr", "mclust", "missForest", "mockery", "multcomp", "openssl", "parallelly", "parsedate", "pcaPP", "pkgdown", "plyr", "polspline", "polynom", "pracma", "processx", "progressr", "proxy", "ps", "pspline", "ragg", "randomForest", "rattle", "rbibutils", "Rd2roxygen", "Rdpack", "readxl", "recipes", "renv", "reticulate", "rlang", "rmarkdown", "rms", "rpart.plot", "RSpectra", "Rtsne", "sass", "scattermore", "sets", "Seurat", "SeuratObject", "spatstat.core", "spatstat.data", "spatstat.geom", "spatstat.sparse", "spatstat.utils", "systemfonts", "testthat", "TH.data", "tinytex", "tree", "tzdb", "usethis", "uuid", "xfun", "xgboost", "XML", "yaml", "yardstick"))
install.packages(c("cluster", "MASS", "Matrix", "mgcv", "nlme", "survival"), lib="D:/R-4.1.3/library")
library(rlang)
install.packages("rlang")
devtools::install_github('IQSS/Zelig')
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::install_github('IQSS/Zelig')
require(rlang)
devtools::install_github('IQSS/Zelig')
install.packages("rlang")
devtools::install_github("tjmahr/WrapRmd")
install.packages("roxygen2")
install.packages(c("mclust","aricode","findPC","tree"))
install.packages("findPC")
install.packages("remotes")
remotes::install_github("haotian-zhuang/FindPC")
library(SSD)
roxygen2::roxygenize(package.dir = ".")
?ssd
load("D:/Dropbox/USC/RA/2020summer/multi-cell sample size/code/data_pmbc.Rdata")
data = data_pmbc
### use pilot data:
p = 15
table(data$phenoid)
num_class = length(table(data$phenoid))
num_PC = length(colnames(data))-1
for(i in 1:num_class){
class_i_ids = which(data$phenoid == names(table(data$phenoid))[i])
p = sample(10:15,1)
pilot_i_ids = sample(class_i_ids, p)
pilot_i_data = data[pilot_i_ids,]
if(i == 1){
pilot_data = pilot_i_data
}else{
pilot_data = rbind(pilot_data, pilot_i_data)
}
}
x_pilot = pilot_data[,-length(pilot_data)]
y_pilot = pilot_data[,length(pilot_data)]
elbow_pilot = ssd(x_pilot, y_pilot)
?ssd
elbow_pilot = ssd(x_pilot, y_pilot)
library(SSD)
roxygen2::roxygenize(package.dir = ".")
library(SSD)
load("D:/Dropbox/USC/RA/2020summer/multi-cell sample size/code/SSD/SSD/inst/extdata/pilot_data_pmbc.Rdata")
library(SSD)
data_pmbc
data_pmbc <- readRDS(system.file("extdata", "data_pmbc.Rdata", package = "SSD"))
data_pmbc <- system.file("extdata", "data_pmbc.Rdata", package = "SSD")
data_pmbc <- load(system.file("extdata", "data_pmbc.Rdata", package = "SSD"))
library(SSD)
data_pmbc <- system.file("extdata", "data_pmbc.Rdata", package = "SSD")
data_pmbc
load("D:/Dropbox/USC/RA/2020summer/multi-cell sample size/code/SSD/SSD/inst/extdata/data_pmbc.Rdata")
View(data_pmbc)
write.csv(data_pmbc,"D:/ropbox/USC/RA/2020summer/multi-cell sample size/code/SSD/SSD/inst/extdata/data_pmbc_24pc", row.names = FALSE)
write.csv(data_pmbc,"D:/ropbox/USC/RA/2020summer/multi-cell sample size/code/SSD/SSD/inst/extdata/data_pmbc_24pc.csv", row.names = FALSE)
write.csv(data_pmbc,file = "D:/ropbox/USC/RA/2020summer/multi-cell sample size/code/SSD/SSD/inst/extdata/data_pmbc_24pc.csv", row.names = FALSE)
write.csv(data_pmbc,file = "D:\Dropbox\USC\RA\2020summer\multi-cell sample size\code\SSD\SSD\inst\extdata\data_pmbc_24pc.csv", row.names = FALSE)
write.csv(data_pmbc,file = "D:\\Dropbox\\USC\\RA\\2020summer\\multi-cell sample size\\code\\SSD\\SSD\\inst\\extdata\\data_pmbc_24pc.csv", row.names = FALSE)
load("D:/Dropbox/USC/RA/2020summer/multi-cell sample size/code/SSD/SSD/inst/extdata/data_heart.Rdata")
View(data_heart)
write.csv(data_pmbc,file = "D:\\Dropbox\\USC\\RA\\2020summer\\multi-cell sample size\\code\\SSD\\SSD\\inst\\extdata\\data_pmbc_24pc.csv", row.names = TRUE)
write.csv(data_heart,file = "D:\\Dropbox\\USC\\RA\\2020summer\\multi-cell sample size\\code\\SSD\\SSD\\inst\\extdata\\data_heart_30pc.csv", row.names = TRUE)
library(SSD)
system.file("extdata", "data_pmbc_24pc.cvs", package = "SSD")
system.file("extdata", "data_pmbc_24pc.csv", package = "SSD")
read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"))
?read.csv
a = read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"), header = TRUE)
View(a)
a = read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"), header = TRUE, row.names = 1)
View(a)
roxygen2::roxygenize(package.dir = ".")
library(SSD)
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
require(cov)
?cov
?nls
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
library(SSD)
library(SSD)
roxygen2::roxygenize(package.dir = ".")
library(SSD)
ssd
?ssd
data_pmbc <- read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"), header = TRUE, row.names = 1)
View(data_pmbc)
rm(data_pmbc)
data_pmbc <- read.csv(system.file("extdata", "data_pmbc_24pc.csv", package = "SSD"), row.names = 1)
View(data_pmbc)
roxygen2::roxygenize(package.dir = ".")
library(SSD)
library(SSD)
